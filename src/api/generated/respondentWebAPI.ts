/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Respondent Web API
 * 
    API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    ## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å OTP
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
    - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (—É–∑–±–µ–∫—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π)
    
    ## –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
    API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
    - `/api/auth/send-otp/` - –æ—Ç–ø—Ä–∞–≤–∫–∞ OTP –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - `/api/auth/verify-otp/` - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∫–æ–¥–∞  
    - `/api/auth/login/` - –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å OTP
    
    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫: `Authorization: Bearer YOUR_ACCESS_TOKEN`
    
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AuthLoginCreate400,
  AuthSendOtpCreate400,
  AuthToken,
  AuthTokenCreate2401,
  AuthTokenRequest,
  AuthVerifyOtpCreate200,
  AuthVerifyOtpCreate400,
  CurrentSessionRetrieve200,
  CustomTokenObtainPairRequest,
  LoginResponse,
  ModeratorDashboardRetrieve200,
  ModeratorSurveysDashboardStatsRetrieve200,
  ModeratorSurveysDetailedResultsRetrieve200,
  ModeratorSurveysList200ItemItem,
  ModeratorSurveysRetrieve200,
  ModeratorUsersGrantRetakeCreate200,
  ModeratorUsersGrantRetakeCreate404,
  ModeratorUsersGrantRetakeCreateBodyFour,
  ModeratorUsersGrantRetakeCreateBodyOne,
  ModeratorUsersGrantRetakeCreateBodyTwo,
  ModeratorUsersList200ItemItem,
  ModeratorUsersListParams,
  ModeratorUsersOverviewRetrieve200Item,
  ModeratorUsersRetrieve200,
  ModeratorUsersSurveyHistoryRetrieve200Item,
  ModeratorUsersSurveyHistoryRetrieveParams,
  OTPResponse,
  PatchedUserRequest,
  PhoneLoginRequest,
  SchemaRetrieve200Four,
  SchemaRetrieve200One,
  SchemaRetrieve200Three,
  SchemaRetrieve200Two,
  SchemaRetrieveParams,
  SendOTPRequest,
  SessionsAllAnswersRetrieve200,
  SessionsCancelCreate200,
  SessionsCancelCreate400,
  SessionsGetQuestionRetrieve200,
  SessionsGetQuestionRetrieve404,
  SessionsGetQuestionRetrieveParams,
  SessionsModifyAnswerCreate200,
  SessionsModifyAnswerCreate400,
  SessionsModifyAnswerCreateBodyOne,
  SessionsModifyAnswerCreateBodyThree,
  SessionsNextQuestionByOrderRetrieve200,
  SessionsNextQuestionByOrderRetrieve404,
  SessionsNextQuestionByOrderRetrieveParams,
  SessionsPreviousQuestionRetrieve200,
  SessionsPreviousQuestionRetrieve404,
  SessionsPreviousQuestionRetrieveParams,
  SessionsProgressRetrieve200,
  SessionsRetrieve200,
  SessionsSubmitAnswerCreate200,
  SessionsSubmitAnswerCreate400,
  SessionsSubmitAnswerCreateBodyOne,
  SessionsSubmitAnswerCreateBodyThree,
  SurveySessionRequest,
  SurveysList200ItemItem,
  SurveysListParams,
  SurveysMyHistoryRetrieve200Item,
  SurveysRetrieve200,
  SurveysRetrieveParams,
  SurveysStartCreate201,
  SurveysStartCreate400,
  SurveysStartCreateBodyOne,
  SurveysStartCreateBodyTwo,
  TokenRefresh,
  TokenRefreshRequest,
  TokenResponse,
  User,
  UserRequest,
  UserSearchResponse,
  UsersSearchRetrieve403,
  UsersSearchRetrieveParams,
  VerifyOTPRequest
} from './models';

import { customInstance } from '../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const authTokenCreate = (
    authTokenRequest: AuthTokenRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`username`, authTokenRequest.username)
formUrlEncoded.append(`password`, authTokenRequest.password)

      return customInstance<AuthToken>(
      {url: `/api/auth-token/`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      options);
    }
  


export const getAuthTokenCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTokenCreate>>, TError,{data: AuthTokenRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authTokenCreate>>, TError,{data: AuthTokenRequest}, TContext> => {

const mutationKey = ['authTokenCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authTokenCreate>>, {data: AuthTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  authTokenCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthTokenCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authTokenCreate>>>
    export type AuthTokenCreateMutationBody = AuthTokenRequest
    export type AuthTokenCreateMutationError = unknown

    export const useAuthTokenCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTokenCreate>>, TError,{data: AuthTokenRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authTokenCreate>>,
        TError,
        {data: AuthTokenRequest},
        TContext
      > => {

      const mutationOptions = getAuthTokenCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ OTP –∫–æ–¥—É.
        
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
 * @summary –í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const authLoginCreate = (
    phoneLoginRequest: PhoneLoginRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<LoginResponse>(
      {url: `/api/auth/login/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: phoneLoginRequest, signal
    },
      options);
    }
  


export const getAuthLoginCreateMutationOptions = <TError = AuthLoginCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLoginCreate>>, TError,{data: PhoneLoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authLoginCreate>>, TError,{data: PhoneLoginRequest}, TContext> => {

const mutationKey = ['authLoginCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLoginCreate>>, {data: PhoneLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  authLoginCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLoginCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authLoginCreate>>>
    export type AuthLoginCreateMutationBody = PhoneLoginRequest
    export type AuthLoginCreateMutationError = AuthLoginCreate400

    /**
 * @summary –í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const useAuthLoginCreate = <TError = AuthLoginCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLoginCreate>>, TError,{data: PhoneLoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authLoginCreate>>,
        TError,
        {data: PhoneLoginRequest},
        TContext
      > => {

      const mutationOptions = getAuthLoginCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç OTP –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        
        –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç OTP –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ SMS.
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –∫–æ–¥
 */
export const authSendOtpCreate = (
    sendOTPRequest: SendOTPRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OTPResponse>(
      {url: `/api/auth/send-otp/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendOTPRequest, signal
    },
      options);
    }
  


export const getAuthSendOtpCreateMutationOptions = <TError = AuthSendOtpCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authSendOtpCreate>>, TError,{data: SendOTPRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authSendOtpCreate>>, TError,{data: SendOTPRequest}, TContext> => {

const mutationKey = ['authSendOtpCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authSendOtpCreate>>, {data: SendOTPRequest}> = (props) => {
          const {data} = props ?? {};

          return  authSendOtpCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthSendOtpCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authSendOtpCreate>>>
    export type AuthSendOtpCreateMutationBody = SendOTPRequest
    export type AuthSendOtpCreateMutationError = AuthSendOtpCreate400

    /**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –∫–æ–¥
 */
export const useAuthSendOtpCreate = <TError = AuthSendOtpCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authSendOtpCreate>>, TError,{data: SendOTPRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authSendOtpCreate>>,
        TError,
        {data: SendOTPRequest},
        TContext
      > => {

      const mutationOptions = getAuthSendOtpCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä—ã JWT —Ç–æ–∫–µ–Ω–æ–≤ (access –∏ refresh) –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç DRF.
 * @summary –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω—ã
 */
export const authTokenCreate2 = (
    customTokenObtainPairRequest: CustomTokenObtainPairRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenResponse>(
      {url: `/api/auth/token/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customTokenObtainPairRequest, signal
    },
      options);
    }
  


export const getAuthTokenCreate2MutationOptions = <TError = AuthTokenCreate2401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTokenCreate2>>, TError,{data: CustomTokenObtainPairRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authTokenCreate2>>, TError,{data: CustomTokenObtainPairRequest}, TContext> => {

const mutationKey = ['authTokenCreate2'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authTokenCreate2>>, {data: CustomTokenObtainPairRequest}> = (props) => {
          const {data} = props ?? {};

          return  authTokenCreate2(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthTokenCreate2MutationResult = NonNullable<Awaited<ReturnType<typeof authTokenCreate2>>>
    export type AuthTokenCreate2MutationBody = CustomTokenObtainPairRequest
    export type AuthTokenCreate2MutationError = AuthTokenCreate2401

    /**
 * @summary –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω—ã
 */
export const useAuthTokenCreate2 = <TError = AuthTokenCreate2401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTokenCreate2>>, TError,{data: CustomTokenObtainPairRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authTokenCreate2>>,
        TError,
        {data: CustomTokenObtainPairRequest},
        TContext
      > => {

      const mutationOptions = getAuthTokenCreate2MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const authTokenRefreshCreate = (
    tokenRefreshRequest: TokenRefreshRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenRefresh>(
      {url: `/api/auth/token/refresh/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefreshRequest, signal
    },
      options);
    }
  


export const getAuthTokenRefreshCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTokenRefreshCreate>>, TError,{data: TokenRefreshRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authTokenRefreshCreate>>, TError,{data: TokenRefreshRequest}, TContext> => {

const mutationKey = ['authTokenRefreshCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authTokenRefreshCreate>>, {data: TokenRefreshRequest}> = (props) => {
          const {data} = props ?? {};

          return  authTokenRefreshCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthTokenRefreshCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authTokenRefreshCreate>>>
    export type AuthTokenRefreshCreateMutationBody = TokenRefreshRequest
    export type AuthTokenRefreshCreateMutationError = unknown

    export const useAuthTokenRefreshCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTokenRefreshCreate>>, TError,{data: TokenRefreshRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authTokenRefreshCreate>>,
        TError,
        {data: TokenRefreshRequest},
        TContext
      > => {

      const mutationOptions = getAuthTokenRefreshCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ OTP –∫–æ–¥–∞.
        
        –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç send-otp –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.
 * @summary –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å OTP –∫–æ–¥
 */
export const authVerifyOtpCreate = (
    verifyOTPRequest: VerifyOTPRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AuthVerifyOtpCreate200>(
      {url: `/api/auth/verify-otp/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyOTPRequest, signal
    },
      options);
    }
  


export const getAuthVerifyOtpCreateMutationOptions = <TError = AuthVerifyOtpCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authVerifyOtpCreate>>, TError,{data: VerifyOTPRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authVerifyOtpCreate>>, TError,{data: VerifyOTPRequest}, TContext> => {

const mutationKey = ['authVerifyOtpCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authVerifyOtpCreate>>, {data: VerifyOTPRequest}> = (props) => {
          const {data} = props ?? {};

          return  authVerifyOtpCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthVerifyOtpCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authVerifyOtpCreate>>>
    export type AuthVerifyOtpCreateMutationBody = VerifyOTPRequest
    export type AuthVerifyOtpCreateMutationError = AuthVerifyOtpCreate400

    /**
 * @summary –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å OTP –∫–æ–¥
 */
export const useAuthVerifyOtpCreate = <TError = AuthVerifyOtpCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authVerifyOtpCreate>>, TError,{data: VerifyOTPRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authVerifyOtpCreate>>,
        TError,
        {data: VerifyOTPRequest},
        TContext
      > => {

      const mutationOptions = getAuthVerifyOtpCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏.
 * @summary –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
 */
export const currentSessionRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CurrentSessionRetrieve200>(
      {url: `/api/current-session/`, method: 'GET', signal
    },
      options);
    }
  

export const getCurrentSessionRetrieveQueryKey = () => {
    return [`/api/current-session/`] as const;
    }

    
export const getCurrentSessionRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof currentSessionRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentSessionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCurrentSessionRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof currentSessionRetrieve>>> = ({ signal }) => currentSessionRetrieve(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof currentSessionRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CurrentSessionRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof currentSessionRetrieve>>>
export type CurrentSessionRetrieveQueryError = unknown


export function useCurrentSessionRetrieve<TData = Awaited<ReturnType<typeof currentSessionRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentSessionRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof currentSessionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof currentSessionRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCurrentSessionRetrieve<TData = Awaited<ReturnType<typeof currentSessionRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentSessionRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof currentSessionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof currentSessionRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCurrentSessionRetrieve<TData = Awaited<ReturnType<typeof currentSessionRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentSessionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
 */

export function useCurrentSessionRetrieve<TData = Awaited<ReturnType<typeof currentSessionRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentSessionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCurrentSessionRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ü–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏)
    - –õ—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–∞–º
    - –û–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è (–Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è)
 * @summary –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
 */
export const moderatorDashboardRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorDashboardRetrieve200>(
      {url: `/api/moderator/dashboard/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorDashboardRetrieveQueryKey = () => {
    return [`/api/moderator/dashboard/`] as const;
    }

    
export const getModeratorDashboardRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorDashboardRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>> = ({ signal }) => moderatorDashboardRetrieve(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorDashboardRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>>
export type ModeratorDashboardRetrieveQueryError = unknown


export function useModeratorDashboardRetrieve<TData = Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorDashboardRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorDashboardRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorDashboardRetrieve<TData = Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorDashboardRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorDashboardRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorDashboardRetrieve<TData = Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
 */

export function useModeratorDashboardRetrieve<TData = Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorDashboardRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorDashboardRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ–ø—Ä–æ—Å–∞–º.
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤
 */
export const moderatorSurveysList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorSurveysList200ItemItem[][]>(
      {url: `/api/moderator/surveys/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorSurveysListQueryKey = () => {
    return [`/api/moderator/surveys/`] as const;
    }

    
export const getModeratorSurveysListQueryOptions = <TData = Awaited<ReturnType<typeof moderatorSurveysList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorSurveysListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorSurveysList>>> = ({ signal }) => moderatorSurveysList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorSurveysListQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorSurveysList>>>
export type ModeratorSurveysListQueryError = unknown


export function useModeratorSurveysList<TData = Awaited<ReturnType<typeof moderatorSurveysList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysList>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysList<TData = Awaited<ReturnType<typeof moderatorSurveysList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysList>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysList<TData = Awaited<ReturnType<typeof moderatorSurveysList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤
 */

export function useModeratorSurveysList<TData = Awaited<ReturnType<typeof moderatorSurveysList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorSurveysListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.
 * @summary –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞
 */
export const moderatorSurveysRetrieve = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorSurveysRetrieve200>(
      {url: `/api/moderator/surveys/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorSurveysRetrieveQueryKey = (id?: number,) => {
    return [`/api/moderator/surveys/${id}/`] as const;
    }

    
export const getModeratorSurveysRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorSurveysRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>> = ({ signal }) => moderatorSurveysRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorSurveysRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>>
export type ModeratorSurveysRetrieveQueryError = unknown


export function useModeratorSurveysRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞
 */

export function useModeratorSurveysRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorSurveysRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.
        
        –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–ø—Ä–æ—Å, —Å –±–∞–ª–ª–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
 */
export const moderatorSurveysDetailedResultsRetrieve = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorSurveysDetailedResultsRetrieve200>(
      {url: `/api/moderator/surveys/${id}/detailed_results/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorSurveysDetailedResultsRetrieveQueryKey = (id?: number,) => {
    return [`/api/moderator/surveys/${id}/detailed_results/`] as const;
    }

    
export const getModeratorSurveysDetailedResultsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorSurveysDetailedResultsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>> = ({ signal }) => moderatorSurveysDetailedResultsRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorSurveysDetailedResultsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>>
export type ModeratorSurveysDetailedResultsRetrieveQueryError = unknown


export function useModeratorSurveysDetailedResultsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysDetailedResultsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysDetailedResultsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
 */

export function useModeratorSurveysDetailedResultsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDetailedResultsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorSurveysDetailedResultsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export const moderatorSurveysDashboardStatsRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorSurveysDashboardStatsRetrieve200>(
      {url: `/api/moderator/surveys/dashboard_stats/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorSurveysDashboardStatsRetrieveQueryKey = () => {
    return [`/api/moderator/surveys/dashboard_stats/`] as const;
    }

    
export const getModeratorSurveysDashboardStatsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorSurveysDashboardStatsRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>> = ({ signal }) => moderatorSurveysDashboardStatsRetrieve(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorSurveysDashboardStatsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>>
export type ModeratorSurveysDashboardStatsRetrieveQueryError = unknown


export function useModeratorSurveysDashboardStatsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysDashboardStatsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorSurveysDashboardStatsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

export function useModeratorSurveysDashboardStatsRetrieve<TData = Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorSurveysDashboardStatsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorSurveysDashboardStatsRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞.
        
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
 * @summary –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
 */
export const moderatorUsersList = (
    params?: ModeratorUsersListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorUsersList200ItemItem[][]>(
      {url: `/api/moderator/users/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getModeratorUsersListQueryKey = (params?: ModeratorUsersListParams,) => {
    return [`/api/moderator/users/`, ...(params ? [params]: [])] as const;
    }

    
export const getModeratorUsersListQueryOptions = <TData = Awaited<ReturnType<typeof moderatorUsersList>>, TError = unknown>(params?: ModeratorUsersListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorUsersListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorUsersList>>> = ({ signal }) => moderatorUsersList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorUsersListQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorUsersList>>>
export type ModeratorUsersListQueryError = unknown


export function useModeratorUsersList<TData = Awaited<ReturnType<typeof moderatorUsersList>>, TError = unknown>(
 params: undefined |  ModeratorUsersListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersList>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersList<TData = Awaited<ReturnType<typeof moderatorUsersList>>, TError = unknown>(
 params?: ModeratorUsersListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersList>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersList<TData = Awaited<ReturnType<typeof moderatorUsersList>>, TError = unknown>(
 params?: ModeratorUsersListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
 */

export function useModeratorUsersList<TData = Awaited<ReturnType<typeof moderatorUsersList>>, TError = unknown>(
 params?: ModeratorUsersListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorUsersListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–ø—Ä–æ—Å–æ–≤.
 * @summary –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
 */
export const moderatorUsersRetrieve = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorUsersRetrieve200>(
      {url: `/api/moderator/users/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorUsersRetrieveQueryKey = (id?: number,) => {
    return [`/api/moderator/users/${id}/`] as const;
    }

    
export const getModeratorUsersRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorUsersRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorUsersRetrieve>>> = ({ signal }) => moderatorUsersRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorUsersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorUsersRetrieve>>>
export type ModeratorUsersRetrieveQueryError = unknown


export function useModeratorUsersRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
 */

export function useModeratorUsersRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorUsersRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫.
 * @summary –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
 */
export const moderatorUsersGrantRetakeCreate = (
    id: number,
    moderatorUsersGrantRetakeCreateBody: ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorUsersGrantRetakeCreate200>(
      {url: `/api/moderator/users/${id}/grant_retake/`, method: 'POST',
      data: moderatorUsersGrantRetakeCreateBody, signal
    },
      options);
    }
  


export const getModeratorUsersGrantRetakeCreateMutationOptions = <TError = ModeratorUsersGrantRetakeCreate404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof moderatorUsersGrantRetakeCreate>>, TError,{id: number;data: ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof moderatorUsersGrantRetakeCreate>>, TError,{id: number;data: ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour}, TContext> => {

const mutationKey = ['moderatorUsersGrantRetakeCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof moderatorUsersGrantRetakeCreate>>, {id: number;data: ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour}> = (props) => {
          const {id,data} = props ?? {};

          return  moderatorUsersGrantRetakeCreate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ModeratorUsersGrantRetakeCreateMutationResult = NonNullable<Awaited<ReturnType<typeof moderatorUsersGrantRetakeCreate>>>
    export type ModeratorUsersGrantRetakeCreateMutationBody = ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour
    export type ModeratorUsersGrantRetakeCreateMutationError = ModeratorUsersGrantRetakeCreate404

    /**
 * @summary –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
 */
export const useModeratorUsersGrantRetakeCreate = <TError = ModeratorUsersGrantRetakeCreate404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof moderatorUsersGrantRetakeCreate>>, TError,{id: number;data: ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof moderatorUsersGrantRetakeCreate>>,
        TError,
        {id: number;data: ModeratorUsersGrantRetakeCreateBodyOne | ModeratorUsersGrantRetakeCreateBodyTwo | unknown | ModeratorUsersGrantRetakeCreateBodyFour},
        TContext
      > => {

      const mutationOptions = getModeratorUsersGrantRetakeCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        
        –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã, –±–∞–ª–ª—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏.
 * @summary –ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const moderatorUsersSurveyHistoryRetrieve = (
    id: number,
    params?: ModeratorUsersSurveyHistoryRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorUsersSurveyHistoryRetrieve200Item[]>(
      {url: `/api/moderator/users/${id}/survey_history/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getModeratorUsersSurveyHistoryRetrieveQueryKey = (id?: number,
    params?: ModeratorUsersSurveyHistoryRetrieveParams,) => {
    return [`/api/moderator/users/${id}/survey_history/`, ...(params ? [params]: [])] as const;
    }

    
export const getModeratorUsersSurveyHistoryRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError = unknown>(id: number,
    params?: ModeratorUsersSurveyHistoryRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorUsersSurveyHistoryRetrieveQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>> = ({ signal }) => moderatorUsersSurveyHistoryRetrieve(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorUsersSurveyHistoryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>>
export type ModeratorUsersSurveyHistoryRetrieveQueryError = unknown


export function useModeratorUsersSurveyHistoryRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError = unknown>(
 id: number,
    params: undefined |  ModeratorUsersSurveyHistoryRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersSurveyHistoryRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError = unknown>(
 id: number,
    params?: ModeratorUsersSurveyHistoryRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersSurveyHistoryRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError = unknown>(
 id: number,
    params?: ModeratorUsersSurveyHistoryRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useModeratorUsersSurveyHistoryRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError = unknown>(
 id: number,
    params?: ModeratorUsersSurveyHistoryRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersSurveyHistoryRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorUsersSurveyHistoryRetrieveQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
 * @summary –û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export const moderatorUsersOverviewRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModeratorUsersOverviewRetrieve200Item[]>(
      {url: `/api/moderator/users/overview/`, method: 'GET', signal
    },
      options);
    }
  

export const getModeratorUsersOverviewRetrieveQueryKey = () => {
    return [`/api/moderator/users/overview/`] as const;
    }

    
export const getModeratorUsersOverviewRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getModeratorUsersOverviewRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>> = ({ signal }) => moderatorUsersOverviewRetrieve(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ModeratorUsersOverviewRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>>
export type ModeratorUsersOverviewRetrieveQueryError = unknown


export function useModeratorUsersOverviewRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersOverviewRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useModeratorUsersOverviewRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

export function useModeratorUsersOverviewRetrieve<TData = Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moderatorUsersOverviewRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getModeratorUsersOverviewRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.

- YAML: application/vnd.oai.openapi
- JSON: application/vnd.oai.openapi+json
 */
export const schemaRetrieve = (
    params?: SchemaRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SchemaRetrieve200One | SchemaRetrieve200Two | SchemaRetrieve200Three | SchemaRetrieve200Four>(
      {url: `/api/schema/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSchemaRetrieveQueryKey = (params?: SchemaRetrieveParams,) => {
    return [`/api/schema/`, ...(params ? [params]: [])] as const;
    }

    
export const getSchemaRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof schemaRetrieve>>, TError = unknown>(params?: SchemaRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof schemaRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSchemaRetrieveQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof schemaRetrieve>>> = ({ signal }) => schemaRetrieve(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof schemaRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SchemaRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof schemaRetrieve>>>
export type SchemaRetrieveQueryError = unknown


export function useSchemaRetrieve<TData = Awaited<ReturnType<typeof schemaRetrieve>>, TError = unknown>(
 params: undefined |  SchemaRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof schemaRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schemaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof schemaRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSchemaRetrieve<TData = Awaited<ReturnType<typeof schemaRetrieve>>, TError = unknown>(
 params?: SchemaRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof schemaRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schemaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof schemaRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSchemaRetrieve<TData = Awaited<ReturnType<typeof schemaRetrieve>>, TError = unknown>(
 params?: SchemaRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof schemaRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSchemaRetrieve<TData = Awaited<ReturnType<typeof schemaRetrieve>>, TError = unknown>(
 params?: SchemaRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof schemaRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSchemaRetrieveQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
 * @summary –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏
 */
export const sessionsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsRetrieve200>(
      {url: `/api/sessions/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getSessionsRetrieveQueryKey = (id?: string,) => {
    return [`/api/sessions/${id}/`] as const;
    }

    
export const getSessionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof sessionsRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSessionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sessionsRetrieve>>> = ({ signal }) => sessionsRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sessionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SessionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof sessionsRetrieve>>>
export type SessionsRetrieveQueryError = unknown


export function useSessionsRetrieve<TData = Awaited<ReturnType<typeof sessionsRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsRetrieve<TData = Awaited<ReturnType<typeof sessionsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsRetrieve<TData = Awaited<ReturnType<typeof sessionsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏
 */

export function useSessionsRetrieve<TData = Awaited<ReturnType<typeof sessionsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSessionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å–µ—Å—Å–∏–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–∞—Ö.
 * @summary –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const sessionsAllAnswersRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsAllAnswersRetrieve200>(
      {url: `/api/sessions/${id}/all_answers/`, method: 'GET', signal
    },
      options);
    }
  

export const getSessionsAllAnswersRetrieveQueryKey = (id?: string,) => {
    return [`/api/sessions/${id}/all_answers/`] as const;
    }

    
export const getSessionsAllAnswersRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSessionsAllAnswersRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>> = ({ signal }) => sessionsAllAnswersRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SessionsAllAnswersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>>
export type SessionsAllAnswersRetrieveQueryError = unknown


export function useSessionsAllAnswersRetrieve<TData = Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsAllAnswersRetrieve<TData = Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsAllAnswersRetrieve<TData = Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useSessionsAllAnswersRetrieve<TData = Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsAllAnswersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSessionsAllAnswersRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
 * @summary –û—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
 */
export const sessionsCancelCreate = (
    id: string,
    surveySessionRequest: SurveySessionRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsCancelCreate200>(
      {url: `/api/sessions/${id}/cancel/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: surveySessionRequest, signal
    },
      options);
    }
  


export const getSessionsCancelCreateMutationOptions = <TError = SessionsCancelCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sessionsCancelCreate>>, TError,{id: string;data: SurveySessionRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sessionsCancelCreate>>, TError,{id: string;data: SurveySessionRequest}, TContext> => {

const mutationKey = ['sessionsCancelCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sessionsCancelCreate>>, {id: string;data: SurveySessionRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  sessionsCancelCreate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SessionsCancelCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sessionsCancelCreate>>>
    export type SessionsCancelCreateMutationBody = SurveySessionRequest
    export type SessionsCancelCreateMutationError = SessionsCancelCreate400

    /**
 * @summary –û—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
 */
export const useSessionsCancelCreate = <TError = SessionsCancelCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sessionsCancelCreate>>, TError,{id: string;data: SurveySessionRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sessionsCancelCreate>>,
        TError,
        {id: string;data: SurveySessionRequest},
        TContext
      > => {

      const mutationOptions = getSessionsCancelCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–æ –µ–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É
 */
export const sessionsGetQuestionRetrieve = (
    id: string,
    params: SessionsGetQuestionRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsGetQuestionRetrieve200>(
      {url: `/api/sessions/${id}/get_question/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSessionsGetQuestionRetrieveQueryKey = (id?: string,
    params?: SessionsGetQuestionRetrieveParams,) => {
    return [`/api/sessions/${id}/get_question/`, ...(params ? [params]: [])] as const;
    }

    
export const getSessionsGetQuestionRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError = SessionsGetQuestionRetrieve404>(id: string,
    params: SessionsGetQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSessionsGetQuestionRetrieveQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>> = ({ signal }) => sessionsGetQuestionRetrieve(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SessionsGetQuestionRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>>
export type SessionsGetQuestionRetrieveQueryError = SessionsGetQuestionRetrieve404


export function useSessionsGetQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError = SessionsGetQuestionRetrieve404>(
 id: string,
    params: SessionsGetQuestionRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsGetQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError = SessionsGetQuestionRetrieve404>(
 id: string,
    params: SessionsGetQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsGetQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError = SessionsGetQuestionRetrieve404>(
 id: string,
    params: SessionsGetQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É
 */

export function useSessionsGetQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError = SessionsGetQuestionRetrieve404>(
 id: string,
    params: SessionsGetQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsGetQuestionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSessionsGetQuestionRetrieveQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ò–∑–º–µ–Ω–∏—Ç—å —É–∂–µ –¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.
        
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
 */
export const sessionsModifyAnswerCreate = (
    id: string,
    sessionsModifyAnswerCreateBody: SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsModifyAnswerCreate200>(
      {url: `/api/sessions/${id}/modify_answer/`, method: 'POST',
      data: sessionsModifyAnswerCreateBody, signal
    },
      options);
    }
  


export const getSessionsModifyAnswerCreateMutationOptions = <TError = SessionsModifyAnswerCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sessionsModifyAnswerCreate>>, TError,{id: string;data: SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sessionsModifyAnswerCreate>>, TError,{id: string;data: SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree}, TContext> => {

const mutationKey = ['sessionsModifyAnswerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sessionsModifyAnswerCreate>>, {id: string;data: SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree}> = (props) => {
          const {id,data} = props ?? {};

          return  sessionsModifyAnswerCreate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SessionsModifyAnswerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sessionsModifyAnswerCreate>>>
    export type SessionsModifyAnswerCreateMutationBody = SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree
    export type SessionsModifyAnswerCreateMutationError = SessionsModifyAnswerCreate400

    /**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
 */
export const useSessionsModifyAnswerCreate = <TError = SessionsModifyAnswerCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sessionsModifyAnswerCreate>>, TError,{id: string;data: SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sessionsModifyAnswerCreate>>,
        TError,
        {id: string;data: SessionsModifyAnswerCreateBodyOne | unknown | SessionsModifyAnswerCreateBodyThree},
        TContext
      > => {

      const mutationOptions = getSessionsModifyAnswerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Ä—è–¥–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–≤–µ—á–µ–Ω –æ–Ω –∏–ª–∏ –Ω–µ—Ç.
 * @summary –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Ä—è–¥–∫—É
 */
export const sessionsNextQuestionByOrderRetrieve = (
    id: string,
    params: SessionsNextQuestionByOrderRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsNextQuestionByOrderRetrieve200>(
      {url: `/api/sessions/${id}/next_question_by_order/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSessionsNextQuestionByOrderRetrieveQueryKey = (id?: string,
    params?: SessionsNextQuestionByOrderRetrieveParams,) => {
    return [`/api/sessions/${id}/next_question_by_order/`, ...(params ? [params]: [])] as const;
    }

    
export const getSessionsNextQuestionByOrderRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError = SessionsNextQuestionByOrderRetrieve404>(id: string,
    params: SessionsNextQuestionByOrderRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSessionsNextQuestionByOrderRetrieveQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>> = ({ signal }) => sessionsNextQuestionByOrderRetrieve(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SessionsNextQuestionByOrderRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>>
export type SessionsNextQuestionByOrderRetrieveQueryError = SessionsNextQuestionByOrderRetrieve404


export function useSessionsNextQuestionByOrderRetrieve<TData = Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError = SessionsNextQuestionByOrderRetrieve404>(
 id: string,
    params: SessionsNextQuestionByOrderRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsNextQuestionByOrderRetrieve<TData = Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError = SessionsNextQuestionByOrderRetrieve404>(
 id: string,
    params: SessionsNextQuestionByOrderRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsNextQuestionByOrderRetrieve<TData = Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError = SessionsNextQuestionByOrderRetrieve404>(
 id: string,
    params: SessionsNextQuestionByOrderRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Ä—è–¥–∫—É
 */

export function useSessionsNextQuestionByOrderRetrieve<TData = Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError = SessionsNextQuestionByOrderRetrieve404>(
 id: string,
    params: SessionsNextQuestionByOrderRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsNextQuestionByOrderRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSessionsNextQuestionByOrderRetrieveQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Ä—è–¥–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–≤–µ—á–µ–Ω –æ–Ω –∏–ª–∏ –Ω–µ—Ç.
 * @summary –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
 */
export const sessionsPreviousQuestionRetrieve = (
    id: string,
    params: SessionsPreviousQuestionRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsPreviousQuestionRetrieve200>(
      {url: `/api/sessions/${id}/previous_question/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSessionsPreviousQuestionRetrieveQueryKey = (id?: string,
    params?: SessionsPreviousQuestionRetrieveParams,) => {
    return [`/api/sessions/${id}/previous_question/`, ...(params ? [params]: [])] as const;
    }

    
export const getSessionsPreviousQuestionRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError = SessionsPreviousQuestionRetrieve404>(id: string,
    params: SessionsPreviousQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSessionsPreviousQuestionRetrieveQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>> = ({ signal }) => sessionsPreviousQuestionRetrieve(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SessionsPreviousQuestionRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>>
export type SessionsPreviousQuestionRetrieveQueryError = SessionsPreviousQuestionRetrieve404


export function useSessionsPreviousQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError = SessionsPreviousQuestionRetrieve404>(
 id: string,
    params: SessionsPreviousQuestionRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsPreviousQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError = SessionsPreviousQuestionRetrieve404>(
 id: string,
    params: SessionsPreviousQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsPreviousQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError = SessionsPreviousQuestionRetrieve404>(
 id: string,
    params: SessionsPreviousQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
 */

export function useSessionsPreviousQuestionRetrieve<TData = Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError = SessionsPreviousQuestionRetrieve404>(
 id: string,
    params: SessionsPreviousQuestionRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsPreviousQuestionRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSessionsPreviousQuestionRetrieveQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Å–µ—Å—Å–∏–∏, –æ—Ç–≤–µ—Ç–∞—Ö –∏ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–∞—Ö.
 * @summary –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏
 */
export const sessionsProgressRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsProgressRetrieve200>(
      {url: `/api/sessions/${id}/progress/`, method: 'GET', signal
    },
      options);
    }
  

export const getSessionsProgressRetrieveQueryKey = (id?: string,) => {
    return [`/api/sessions/${id}/progress/`] as const;
    }

    
export const getSessionsProgressRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSessionsProgressRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sessionsProgressRetrieve>>> = ({ signal }) => sessionsProgressRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SessionsProgressRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof sessionsProgressRetrieve>>>
export type SessionsProgressRetrieveQueryError = unknown


export function useSessionsProgressRetrieve<TData = Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsProgressRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsProgressRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsProgressRetrieve<TData = Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionsProgressRetrieve>>,
          TError,
          Awaited<ReturnType<typeof sessionsProgressRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSessionsProgressRetrieve<TData = Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏
 */

export function useSessionsProgressRetrieve<TData = Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sessionsProgressRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSessionsProgressRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤: –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
 */
export const sessionsSubmitAnswerCreate = (
    id: string,
    sessionsSubmitAnswerCreateBody: SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SessionsSubmitAnswerCreate200>(
      {url: `/api/sessions/${id}/submit_answer/`, method: 'POST',
      data: sessionsSubmitAnswerCreateBody, signal
    },
      options);
    }
  


export const getSessionsSubmitAnswerCreateMutationOptions = <TError = SessionsSubmitAnswerCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sessionsSubmitAnswerCreate>>, TError,{id: string;data: SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sessionsSubmitAnswerCreate>>, TError,{id: string;data: SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree}, TContext> => {

const mutationKey = ['sessionsSubmitAnswerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sessionsSubmitAnswerCreate>>, {id: string;data: SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree}> = (props) => {
          const {id,data} = props ?? {};

          return  sessionsSubmitAnswerCreate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SessionsSubmitAnswerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sessionsSubmitAnswerCreate>>>
    export type SessionsSubmitAnswerCreateMutationBody = SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree
    export type SessionsSubmitAnswerCreateMutationError = SessionsSubmitAnswerCreate400

    /**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
 */
export const useSessionsSubmitAnswerCreate = <TError = SessionsSubmitAnswerCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sessionsSubmitAnswerCreate>>, TError,{id: string;data: SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sessionsSubmitAnswerCreate>>,
        TError,
        {id: string;data: SessionsSubmitAnswerCreateBodyOne | unknown | SessionsSubmitAnswerCreateBodyThree},
        TContext
      > => {

      const mutationOptions = getSessionsSubmitAnswerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É.
 * @summary –°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
 */
export const surveysList = (
    params?: SurveysListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SurveysList200ItemItem[][]>(
      {url: `/api/surveys/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSurveysListQueryKey = (params?: SurveysListParams,) => {
    return [`/api/surveys/`, ...(params ? [params]: [])] as const;
    }

    
export const getSurveysListQueryOptions = <TData = Awaited<ReturnType<typeof surveysList>>, TError = unknown>(params?: SurveysListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSurveysListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof surveysList>>> = ({ signal }) => surveysList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof surveysList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SurveysListQueryResult = NonNullable<Awaited<ReturnType<typeof surveysList>>>
export type SurveysListQueryError = unknown


export function useSurveysList<TData = Awaited<ReturnType<typeof surveysList>>, TError = unknown>(
 params: undefined |  SurveysListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveysList>>,
          TError,
          Awaited<ReturnType<typeof surveysList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSurveysList<TData = Awaited<ReturnType<typeof surveysList>>, TError = unknown>(
 params?: SurveysListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveysList>>,
          TError,
          Awaited<ReturnType<typeof surveysList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSurveysList<TData = Awaited<ReturnType<typeof surveysList>>, TError = unknown>(
 params?: SurveysListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
 */

export function useSurveysList<TData = Awaited<ReturnType<typeof surveysList>>, TError = unknown>(
 params?: SurveysListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSurveysListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –ø–æ ID.
 * @summary –î–µ—Ç–∞–ª–∏ –æ–ø—Ä–æ—Å–∞
 */
export const surveysRetrieve = (
    id: number,
    params?: SurveysRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SurveysRetrieve200>(
      {url: `/api/surveys/${id}/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSurveysRetrieveQueryKey = (id?: number,
    params?: SurveysRetrieveParams,) => {
    return [`/api/surveys/${id}/`, ...(params ? [params]: [])] as const;
    }

    
export const getSurveysRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof surveysRetrieve>>, TError = unknown>(id: number,
    params?: SurveysRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSurveysRetrieveQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof surveysRetrieve>>> = ({ signal }) => surveysRetrieve(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof surveysRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SurveysRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof surveysRetrieve>>>
export type SurveysRetrieveQueryError = unknown


export function useSurveysRetrieve<TData = Awaited<ReturnType<typeof surveysRetrieve>>, TError = unknown>(
 id: number,
    params: undefined |  SurveysRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveysRetrieve>>,
          TError,
          Awaited<ReturnType<typeof surveysRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSurveysRetrieve<TData = Awaited<ReturnType<typeof surveysRetrieve>>, TError = unknown>(
 id: number,
    params?: SurveysRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveysRetrieve>>,
          TError,
          Awaited<ReturnType<typeof surveysRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSurveysRetrieve<TData = Awaited<ReturnType<typeof surveysRetrieve>>, TError = unknown>(
 id: number,
    params?: SurveysRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª–∏ –æ–ø—Ä–æ—Å–∞
 */

export function useSurveysRetrieve<TData = Awaited<ReturnType<typeof surveysRetrieve>>, TError = unknown>(
 id: number,
    params?: SurveysRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSurveysRetrieveQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
        
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —è–∑—ã–∫.
 * @summary –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å
 */
export const surveysStartCreate = (
    id: number,
    surveysStartCreateBody: SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SurveysStartCreate201>(
      {url: `/api/surveys/${id}/start/`, method: 'POST',
      data: surveysStartCreateBody, signal
    },
      options);
    }
  


export const getSurveysStartCreateMutationOptions = <TError = SurveysStartCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof surveysStartCreate>>, TError,{id: number;data: SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof surveysStartCreate>>, TError,{id: number;data: SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown}, TContext> => {

const mutationKey = ['surveysStartCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof surveysStartCreate>>, {id: number;data: SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown}> = (props) => {
          const {id,data} = props ?? {};

          return  surveysStartCreate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SurveysStartCreateMutationResult = NonNullable<Awaited<ReturnType<typeof surveysStartCreate>>>
    export type SurveysStartCreateMutationBody = SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown
    export type SurveysStartCreateMutationError = SurveysStartCreate400

    /**
 * @summary –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å
 */
export const useSurveysStartCreate = <TError = SurveysStartCreate400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof surveysStartCreate>>, TError,{id: number;data: SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof surveysStartCreate>>,
        TError,
        {id: number;data: SurveysStartCreateBodyOne | SurveysStartCreateBodyTwo | unknown},
        TContext
      > => {

      const mutationOptions = getSurveysStartCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 * @summary –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–æ—Å–æ–≤
 */
export const surveysMyHistoryRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SurveysMyHistoryRetrieve200Item[]>(
      {url: `/api/surveys/my_history/`, method: 'GET', signal
    },
      options);
    }
  

export const getSurveysMyHistoryRetrieveQueryKey = () => {
    return [`/api/surveys/my_history/`] as const;
    }

    
export const getSurveysMyHistoryRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSurveysMyHistoryRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>> = ({ signal }) => surveysMyHistoryRetrieve(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SurveysMyHistoryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>>
export type SurveysMyHistoryRetrieveQueryError = unknown


export function useSurveysMyHistoryRetrieve<TData = Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSurveysMyHistoryRetrieve<TData = Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSurveysMyHistoryRetrieve<TData = Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–æ—Å–æ–≤
 */

export function useSurveysMyHistoryRetrieve<TData = Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof surveysMyHistoryRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSurveysMyHistoryRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ —Å–µ–±—è.
 * @summary –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export const usersList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User[]>(
      {url: `/api/users/`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersListQueryKey = () => {
    return [`/api/users/`] as const;
    }

    
export const getUsersListQueryOptions = <TData = Awaited<ReturnType<typeof usersList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersList>>> = ({ signal }) => usersList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersListQueryResult = NonNullable<Awaited<ReturnType<typeof usersList>>>
export type UsersListQueryError = unknown


export function useUsersList<TData = Awaited<ReturnType<typeof usersList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersList>>,
          TError,
          Awaited<ReturnType<typeof usersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersList<TData = Awaited<ReturnType<typeof usersList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersList>>,
          TError,
          Awaited<ReturnType<typeof usersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersList<TData = Awaited<ReturnType<typeof usersList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

export function useUsersList<TData = Awaited<ReturnType<typeof usersList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID.
 * @summary –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usersRetrieve = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/api/users/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersRetrieveQueryKey = (id?: number,) => {
    return [`/api/users/${id}/`] as const;
    }

    
export const getUsersRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersRetrieve>>> = ({ signal }) => usersRetrieve(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof usersRetrieve>>>
export type UsersRetrieveQueryError = unknown


export function useUsersRetrieve<TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersRetrieve>>,
          TError,
          Awaited<ReturnType<typeof usersRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersRetrieve<TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersRetrieve>>,
          TError,
          Awaited<ReturnType<typeof usersRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersRetrieve<TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useUsersRetrieve<TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usersUpdate = (
    id: number,
    userRequest: UserRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<User>(
      {url: `/api/users/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userRequest
    },
      options);
    }
  


export const getUsersUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: UserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: UserRequest}, TContext> => {

const mutationKey = ['usersUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersUpdate>>, {id: number;data: UserRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  usersUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdate>>>
    export type UsersUpdateMutationBody = UserRequest
    export type UsersUpdateMutationError = unknown

    /**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useUsersUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: UserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersUpdate>>,
        TError,
        {id: number;data: UserRequest},
        TContext
      > => {

      const mutationOptions = getUsersUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
 * @summary –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usersPartialUpdate = (
    id: number,
    patchedUserRequest: PatchedUserRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<User>(
      {url: `/api/users/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedUserRequest
    },
      options);
    }
  


export const getUsersPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPartialUpdate>>, TError,{id: number;data: PatchedUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersPartialUpdate>>, TError,{id: number;data: PatchedUserRequest}, TContext> => {

const mutationKey = ['usersPartialUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPartialUpdate>>, {id: number;data: PatchedUserRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  usersPartialUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersPartialUpdate>>>
    export type UsersPartialUpdateMutationBody = PatchedUserRequest
    export type UsersPartialUpdateMutationError = unknown

    /**
 * @summary –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useUsersPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPartialUpdate>>, TError,{id: number;data: PatchedUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersPartialUpdate>>,
        TError,
        {id: number;data: PatchedUserRequest},
        TContext
      > => {

      const mutationOptions = getUsersPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
 * @summary –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
 */
export const usersMeRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/api/users/me/`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersMeRetrieveQueryKey = () => {
    return [`/api/users/me/`] as const;
    }

    
export const getUsersMeRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof usersMeRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersMeRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMeRetrieve>>> = ({ signal }) => usersMeRetrieve(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersMeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof usersMeRetrieve>>>
export type UsersMeRetrieveQueryError = unknown


export function useUsersMeRetrieve<TData = Awaited<ReturnType<typeof usersMeRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof usersMeRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersMeRetrieve<TData = Awaited<ReturnType<typeof usersMeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof usersMeRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersMeRetrieve<TData = Awaited<ReturnType<typeof usersMeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
 */

export function useUsersMeRetrieve<TData = Awaited<ReturnType<typeof usersMeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersMeRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
        
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
 * @summary –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export const usersSearchRetrieve = (
    params: UsersSearchRetrieveParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserSearchResponse>(
      {url: `/api/users/search/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getUsersSearchRetrieveQueryKey = (params?: UsersSearchRetrieveParams,) => {
    return [`/api/users/search/`, ...(params ? [params]: [])] as const;
    }

    
export const getUsersSearchRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof usersSearchRetrieve>>, TError = UsersSearchRetrieve403>(params: UsersSearchRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersSearchRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersSearchRetrieveQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersSearchRetrieve>>> = ({ signal }) => usersSearchRetrieve(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersSearchRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersSearchRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof usersSearchRetrieve>>>
export type UsersSearchRetrieveQueryError = UsersSearchRetrieve403


export function useUsersSearchRetrieve<TData = Awaited<ReturnType<typeof usersSearchRetrieve>>, TError = UsersSearchRetrieve403>(
 params: UsersSearchRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersSearchRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersSearchRetrieve>>,
          TError,
          Awaited<ReturnType<typeof usersSearchRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersSearchRetrieve<TData = Awaited<ReturnType<typeof usersSearchRetrieve>>, TError = UsersSearchRetrieve403>(
 params: UsersSearchRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersSearchRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersSearchRetrieve>>,
          TError,
          Awaited<ReturnType<typeof usersSearchRetrieve>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersSearchRetrieve<TData = Awaited<ReturnType<typeof usersSearchRetrieve>>, TError = UsersSearchRetrieve403>(
 params: UsersSearchRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersSearchRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

export function useUsersSearchRetrieve<TData = Awaited<ReturnType<typeof usersSearchRetrieve>>, TError = UsersSearchRetrieve403>(
 params: UsersSearchRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersSearchRetrieve>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersSearchRetrieveQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




